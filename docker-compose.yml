services:
  web:
    image: velizar86/videoflix-backend:latest
    pull_policy: always
    command: ["/app/backend.entrypoint.sh", "web"]
    env_file:
      - .env
    environment:
      - USE_S3_MEDIA=${USE_S3_MEDIA}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - AWS_S3_QUERYSTRING_AUTH=${AWS_S3_QUERYSTRING_AUTH}
      - AWS_DEFAULT_REGION=${AWS_S3_REGION_NAME}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    networks:
      - app-network
    volumes:
      - static_volume:/app/staticfiles
    healthcheck:
      test: ["CMD-SHELL", "python - << 'PY'\nimport socket,sys\ns=socket.create_connection(('localhost',8000),5)\ns.close();sys.exit(0)\nPY"]
      interval: 30s
      retries: 3
      start_period: 45s
      timeout: 10s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started

  redis:
    image: redis:alpine
    networks:
      - app-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  rq_worker:
    image: velizar86/videoflix-backend:latest
    pull_policy: always
    command: ["/app/backend.entrypoint.sh", "worker"]
    env_file:
      - .env
    environment:
      - USE_S3_MEDIA=${USE_S3_MEDIA}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - AWS_S3_QUERYSTRING_AUTH=${AWS_S3_QUERYSTRING_AUTH}
      - AWS_DEFAULT_REGION=${AWS_S3_REGION_NAME}
      - OMP_NUM_THREADS=1
      - OPENBLAS_NUM_THREADS=1
      - NUMEXPR_MAX_THREADS=1
      - FFMPEG_THREADS=1
      - RQ_DEFAULT_TIMEOUT=1800
    networks:
      - app-network
    volumes:
      - static_volume:/app/staticfiles
    mem_limit: 1g
    cpus: "1.0"
    ulimits:
      nofile: 4096
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    networks:
      - app-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped

  certbot_bootstrap:
    image: certbot/certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot certonly --webroot -w /var/www/certbot
      --email ganchev.veli@gmail.com --agree-tos --no-eff-email
      -d api.videoflix-velizar-ganchev-backend.com"

  certbot_renew:
    image: certbot/certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    entrypoint: >
      sh -c "trap exit TERM; while :; do
      certbot renew --webroot -w /var/www/certbot --quiet && echo 'renewed';
      sleep 12h & wait $!; done"
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  redis_data:
  static_volume:
  certbot_www:
  certbot_etc:

networks:
  app-network:
    driver: bridge
